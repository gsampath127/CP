@{
    ViewBag.Title = "EditDocumentTypeExternalId";
    Layout = null;
}
<html>
<head>
    @using RRD.FSG.RP.Web.UI.HostedAdmin.ViewModels;
    @model RRD.FSG.RP.Web.UI.HostedAdmin.ViewModels.EditDocumentTypeExternalIdViewModel

    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="IE=100">
    <title>RightProspectus</title>
    @Styles.Render("~/Content/css")
    @Scripts.Render("~/bundles/modernizr")
    @Scripts.Render("~/bundles/jquery")
    @Styles.Render("~/Content/Kendo/css")
    @Scripts.Render("~/bundles/Kendo")
    <script src="~/Scripts/HostedAdmin/EditDocumentTypeExternalIdSettings.js"></script>
    <link href="~/Content/RP/Site.css" rel="stylesheet" />
</head>
<body>
    <div>
        @using (Html.BeginForm("EditDocumentTypeExternalId", "DocumentTypeExternalId"))
        {
            <div class="navbar navbar-default navbar-fixed-top">
                <div class="container navigationFullMenu nowrap">
                    <div class="navbar-header">
                       @* Checking for modifiedby field here because the table TaxonamyLevelExternalId does not have a primary key column which is an identity field
                        instead is using a composite key whose value is got from other tables. Ideal solution is to check for presence of primary key value which is
                        an identity column. *@
                        @if (Model.ModifiedBy > 0)
                        {
                            <a class="navbar-brand" href="#">Edit Document Type External ID</a>
                        }
                        else
                        {
                            <a class="navbar-brand" href="#">Add Document Type External ID</a>
                        }

                        <button id="togglebutton" type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
                            <span class="icon-bar"></span>
                            <span class="icon-bar"></span>
                            <span class="icon-bar"></span>
                        </button>
                    </div>
                    <div id="navbar-popup" class="navbar-collapse collapse">
                        <ul class="nav navbar-nav navbar-right">
                            <li>
                                <a class="popup-close" id="closeWindow" href="javascript:window.close();">Close Window</a>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
            <div id="main" class="container">
                <div class="row">
                    <div class="col-lg-12">
                        <div class="col-sm-6">
                        </div>
                        <div class="col-sm-6">
                            <label class="pull-right"><b class="validationMessage">*</b> indicates required field</label>
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-lg-12">
                        <div class="col-sm-6">
                            <div class="form-group">
                                <div id="dvTaxMsg" style="display: none;" class='validation-popup'>
                                    <div></div>
                                    <div class='validation-popup-message' id="dvShowTaxMsg"></div>
                                </div>

                                @Html.LabelFor(model => model.DocumentType)
                                <span class="mandatoryAsterisk">*</span>

                                @if (Model.SelectedDocumentTypeId == -1)
                                {
                                    @Html.DropDownListFor(model => model.SelectedDocumentTypeId, new SelectList(Model.DocumentType, "Value", "Display"), new { @class = "form-control", id = "comboDocumentTypes" })

                                }
                                else
                                {
                                    @Html.DropDownListFor(model => model.SelectedDocumentTypeId, new SelectList(Model.DocumentType, "Value", "Display"), new { @class = "form-control", id = "comboDocumentTypes", disabled = "disabled" })
                                    @Html.HiddenFor(model => model.SelectedDocumentTypeId)
                                }
                            </div>

                            <div class="col-sm-6">
                                <div class="form-group">
                                    <div class="form-group">
                                    </div>
                                    <input type="hidden" value="@ViewData["Success"].ToString()" id="hdnSuccessOrFailedMessage" />
                                </div>

                            </div>

                        </div>

                        <div class="col-sm-6">
                            <div class="form-group">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.ExternalId)
                                    <span class="mandatoryAsterisk">*</span>

                                    @if (Model.SelectedDocumentTypeId == -1)
                                    {
                                        @Html.TextBoxFor(model => model.ExternalId, new { @class = "form-control", placeholder = "External Id", type = "text", id = "txtExternalId" })

                                    }
                                    else
                                    {
                                        @Html.TextBoxFor(model => model.ExternalId, new { @class = "form-control", placeholder = "External Id", type = "text", id = "txtExternalId", disabled = "disabled" })
                                        @Html.HiddenFor(model => model.ExternalId)

                                    }

                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                @if (Model.ModifiedBy > 0)
                {
                    <div class="row">
                        <div class="col-lg-12">

                            <div class="col-sm-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.ModifiedDate)
                                    <span class="mandatoryAsterisk">*</span>
                                    @Html.TextBoxFor(model => model.ModifiedDate, new { @class = "form-control", placeholder = "Modified Date", type = "text", id = "txtModifiedByName", disabled = "disabled" })
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.ModifiedByName)
                                    <span class="mandatoryAsterisk">*</span>
                                    @Html.TextBoxFor(model => model.ModifiedByName, new { @class = "form-control", type = "text", id = "txtModifiedByName", disabled = "disabled" })
                                    @*  @Html.TextBoxFor(model => model.ModifiedByName == null ? string.Empty : model.ModifiedByName, new { @class = "form-control", placeholder = "Modified By Name", type = "text", id = "txtModifiedByName", disabled = "disabled" })*@
                                </div>
                            </div>
                        </div>
                    </div>
                }
                <div class="row">
                    <div class="col-lg-12">
                        <div class="col-sm-6">
                            <div class="form-group">
                                @Html.LabelFor(model => model.IsPrimary)

                                @*@Html.CheckBoxFor(model => model.IsPrimary, new { @class = "form-control", id = "chkIsPrimary" })*@
                                @Html.CheckBoxFor(model => model.IsPrimary, new { @class = "form-checkbox", id = "chkIsPrimary" })
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-12">
                        <div class="col-sm-6">
                            <div class="form-group">
                                <button id="submitDocTypeExternalId" type="submit" class="AlignButton btn btn-default m-top-15">Submit</button>
                            </div>
                        </div>
                    </div>
                </div>

                @*<div class="form-inline">

                    </div>*@

            </div>
            <div>
                <script id="divDocumentTypeExternalIdValidations" type="text/x-kendo-template">
                </script>
            </div>
            <div>
                <script id="divSuccessOrFailedMessage" type="text/x-kendo-template">
                    <p class="message">Document Type External ID Saved Successfully.</p>
                    <button class="confirm k-button" style="margin:10px">OK</button>
                </script>
            </div>
            <div id="dvCheckCombinationDataAlreadyExists" data-request-url="@Url.Action("CheckCombinationDataAlreadyExists", "DocumentTypeExternalId")"></div>
            <div id="dvCheckExternalIdAlreadyExists" data-request-url="@Url.Action("CheckExternalIdAlreadyExists", "DocumentTypeExternalId")"></div>


            <div id="footer" class="layoutFooter"></div>

        }
    </div>
    @*<div id="dvLoadDocumentTypes" data-request-url="@Url.Action("LoadDocumentTypes", "DocumentTypeExternalId")"></div>
        <div id="dvDefaultExternalIDForDocumentTypes" data-request-url="@Url.Action("LoadDefaultExternalIDForDocumentType", "DocumentTypeExternalId")"></div>*@

</body>
</html>